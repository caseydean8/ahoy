{"version":3,"sources":["components/Jumbotron/index.js","components/Wrapper/index.js","components/ShipCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","props","className","banner","score","highScore","Wrapper","children","ShipCard","image","map","ship","i","src","alt","key","onClick","shipClick","id","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","ships","console","log","App","state","clicked","shipId","includes","setBanner","setState","incrementScore","push","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2kDAsBeA,MAnBf,SAAmBC,GACjB,OACE,yBAAKC,UAAU,yBACb,oCACA,yBAAKA,UAAU,UACX,4BAAMD,EAAME,SAEhB,yBAAKD,UAAU,cACb,yBAAKA,UAAU,gBACb,sCAAaD,EAAMG,QAErB,yBAAKF,UAAU,qBACb,2CAAkBD,EAAMI,eCTnBC,MAJf,SAAiBL,GACf,OAAO,6BAAMA,EAAMM,W,MCsBNC,MAtBf,SAAkBP,GAChB,OACE,yBAAKC,UAAU,WACZD,EAAMQ,MAAMC,KAAI,SAACC,EAAMC,GACtB,OACE,yBAAKV,UAAU,gBACb,yBACEA,UAAU,WACVW,IAAKF,EAAKF,MACVK,IAAI,OACJC,IAAKH,EACLI,QAAS,WACPf,EAAMgB,UAAUN,EAAKO,a,OCPrC,SAASC,EAAQC,GAIf,IAHA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAGlB,IAAMD,GAGXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,EAGTD,EAAQS,GACRC,QAAQC,IAAIX,EAAQS,I,IAqDLG,E,2MAlDbC,MAAQ,CACNvB,MAAOmB,EACPK,QAAS,GACT9B,OAAQ,sDACRC,MAAO,EACPC,UAAW,G,EAGbY,UAAY,SAACiB,GACP,EAAKF,MAAMC,QAAQE,SAASD,IAChC,EAAKE,UAAU,cACX,EAAKJ,MAAM5B,MAAQ,EAAK4B,MAAM3B,WAClC,EAAKgC,SAAS,CAAChC,UAAW,EAAK2B,MAAM5B,QACrC,EAAKiC,SAAS,CAAEJ,QAAS,GAAI7B,MAAO,MAEpCe,EAAQS,GACR,EAAKU,iBACL,EAAKF,UAAU,IACf,EAAKJ,MAAMC,QAAQM,KAAKL,GACxBL,QAAQC,IAAI,EAAKE,MAAMC,SACvBJ,QAAQC,IAAIX,EAAQS,M,EAItBQ,UAAY,SAACjC,GACX,EAAKkC,SAAS,CAAElC,Y,EAGlBmC,eAAiB,WACf,EAAKD,SAAS,CAAEjC,MAAO,EAAK4B,MAAM5B,MAAQ,K,wEAI1C,OACE,yBAAKF,UAAU,aACb,kBAAC,EAAD,CACAC,OAASqC,KAAKR,MAAM7B,OACpBC,MAAQoC,KAAKR,MAAM5B,MACnBC,UAAYmC,KAAKR,MAAM3B,YAEvB,kBAAC,EAAD,KACE,kBAAC,EAAD,CACAY,UAAWuB,KAAKvB,UAChBR,MAAO+B,KAAKR,MAAMvB,c,GA5CVgC,aClBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0a943b59.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron(props) {\n  return (\n    <div className=\"jumbotron text-center\">\n      <h1>Ahoy</h1>\n      <div className=\"banner\">\n          <h3>{ props.banner }</h3>\n      </div>\n      <div className=\"row scores\">\n        <div className=\"column score\">\n          <h3>Score: { props.score }</h3>\n        </div>\n        <div className=\"column high-score\">\n          <h3>High Score: { props.highScore }</h3>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Jumbotron;","import React from \"react\";\n\nfunction Wrapper(props) {\n  return <div>{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction ShipCard(props) {\n  return (\n    <div className=\"wrapper\">\n      {props.image.map((ship, i) => {\n        return (\n          <div className=\"image-holder\">\n            <img\n              className=\"ship-img\"\n              src={ship.image}\n              alt=\"ship\"\n              key={i}\n              onClick={() => {\n                props.shipClick(ship.id);\n              }}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default ShipCard;\n","import React, { Component } from 'react';\nimport Jumbotron from './components/Jumbotron';\nimport Wrapper from './components/Wrapper';\nimport ShipCard from './components/ShipCard'\nimport ships from './ships.json';\n// https://github.com/caseydean8/ahoy repository\n// https://caseydean8.github.io/ahoy/  git hub pages\n\nfunction shuffle(array) {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}  \n\nshuffle(ships)\nconsole.log(shuffle(ships))\n\nclass App extends Component {\n  state = {\n    image: ships,\n    clicked: [],\n    banner: \"tap any ship to begin, don't tap the same one twice\",\n    score: 0,\n    highScore: 0\n  };\n\n  shipClick = (shipId) => {\n    if (this.state.clicked.includes(shipId)) {\n    this.setBanner(\"GAME OVER!\")\n    if (this.state.score > this.state.highScore)\n    this.setState({highScore: this.state.score})\n    this.setState({ clicked: [], score: 0 })\n    } else {\n    shuffle(ships)\n    this.incrementScore()\n    this.setBanner(\"\")\n    this.state.clicked.push(shipId)\n    console.log(this.state.clicked)\n    console.log(shuffle(ships))\n    }\n  }\n\n  setBanner = (banner) => {\n    this.setState({ banner })\n  }\n\n  incrementScore = () => {\n    this.setState({ score: this.state.score + 1 })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Jumbotron \n        banner={ this.state.banner }\n        score={ this.state.score }\n        highScore={ this.state.highScore }\n        />\n        <Wrapper>\n          <ShipCard\n          shipClick={this.shipClick}\n          image={this.state.image} />\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}