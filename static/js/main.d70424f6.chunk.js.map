{"version":3,"sources":["components/Jumbotron/index.js","components/ShipContainer/index.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","props","className","score","highScore","ShipContainer","image","map","ship","i","key","alt","style","backgroundImage","onClick","shipClick","id","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","ships","App","state","clicked","shipId","includes","setBanner","setState","incrementScore","push","banner","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ijDAqBeA,MAlBf,SAAmBC,GACjB,OACE,yBAAKC,UAAU,yBACb,2CACA,kDACA,6DACA,yBAAKA,UAAU,cACb,yBAAKA,UAAU,YACb,sCAAYD,EAAME,QAEpB,yBAAKD,UAAU,YACb,2CAAiBD,EAAMG,e,MCWlBC,MAtBf,SAAuBJ,GACrB,OACE,yBAAKC,UAAU,WACZD,EAAMK,MAAMC,KAAI,SAACC,EAAMC,GACtB,OACE,yBAAKP,UAAU,eAAeQ,IAAKD,GACjC,yBACEP,UAAU,WACVS,IAAI,OACJC,MAAO,CAAEC,gBAAgB,OAAD,OAASL,EAAKF,MAAd,MACxBI,IAAKD,EACLK,QAAS,WACPb,EAAMc,UAAUP,EAAKQ,a,OCVrC,SAASC,EAAQC,GAMf,IALA,IACEC,EACAC,EAFEC,EAAeH,EAAMI,OAKlB,IAAMD,GAEXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,EAGTD,EAAQS,G,IA6COC,E,2MA1CbC,MAAQ,CACNtB,MAAOoB,EACPG,QAAS,GACT1B,MAAO,EACPC,UAAW,G,EAGbW,UAAY,SAACe,GACP,EAAKF,MAAMC,QAAQE,SAASD,IAC9B,EAAKE,UAAU,cACX,EAAKJ,MAAMzB,MAAQ,EAAKyB,MAAMxB,WAChC,EAAK6B,SAAS,CAAE7B,UAAW,EAAKwB,MAAMzB,QACxC,EAAK8B,SAAS,CAAEJ,QAAS,GAAI1B,MAAO,MAEpCc,EAAQS,GACR,EAAKQ,iBACL,EAAKF,UAAU,IACf,EAAKJ,MAAMC,QAAQM,KAAKL,K,EAI5BE,UAAY,SAACI,GACX,EAAKH,SAAS,CAAEG,Y,EAGlBF,eAAiB,WACf,EAAKD,SAAS,CAAE9B,MAAO,EAAKyB,MAAMzB,MAAQ,K,wEAI1C,OACE,yBAAKD,UAAU,aACb,kBAAC,EAAD,CACEC,MAAOkC,KAAKT,MAAMzB,MAClBC,UAAWiC,KAAKT,MAAMxB,YAExB,kBAAC,EAAD,CAAeW,UAAWsB,KAAKtB,UAAWT,MAAO+B,KAAKT,MAAMtB,a,GArClDgC,aCfEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d70424f6.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron(props) {\n  return (\n    <div className=\"jumbotron text-center\">\n      <h1>React Ahoy!</h1>\n      <h4>Tap a ship to play</h4>\n      <h4>Don't tap the same ship twice</h4>\n      <div className=\"row scores\">\n        <div className=\"col-sm-6\">\n          <h3>Score: {props.score}</h3>\n        </div>\n        <div className=\"col-sm-6\">\n          <h3>High Score: {props.highScore}</h3>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction ShipContainer(props) {\n  return (\n    <div className=\"wrapper\">\n      {props.image.map((ship, i) => {\n        return (\n          <div className=\"image-holder\" key={i}>\n            <div\n              className=\"ship-img\"\n              alt=\"ship\"\n              style={{ backgroundImage: `url(${ship.image})` }}\n              key={i}\n              onClick={() => {\n                props.shipClick(ship.id);\n              }}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default ShipContainer;\n","import React, { Component } from \"react\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport ShipContainer from \"./components/ShipContainer\";\nimport ships from \"./ships.json\";\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nshuffle(ships);\n\nclass App extends Component {\n  state = {\n    image: ships,\n    clicked: [],\n    score: 0,\n    highScore: 0,\n  };\n\n  shipClick = (shipId) => {\n    if (this.state.clicked.includes(shipId)) {\n      this.setBanner(\"GAME OVER!\");\n      if (this.state.score > this.state.highScore)\n        this.setState({ highScore: this.state.score });\n      this.setState({ clicked: [], score: 0 });\n    } else {\n      shuffle(ships);\n      this.incrementScore();\n      this.setBanner(\"\");\n      this.state.clicked.push(shipId);\n    }\n  };\n\n  setBanner = (banner) => {\n    this.setState({ banner });\n  };\n\n  incrementScore = () => {\n    this.setState({ score: this.state.score + 1 });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Jumbotron\n          score={this.state.score}\n          highScore={this.state.highScore}\n        />\n        <ShipContainer shipClick={this.shipClick} image={this.state.image} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}